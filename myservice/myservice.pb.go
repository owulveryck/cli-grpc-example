// Code generated by protoc-gen-go. DO NOT EDIT.
// source: myservice/myservice.proto

/*
Package myservice is a generated protocol buffer package.

It is generated from these files:
	myservice/myservice.proto

It has these top-level messages:
	Arg
	Output
*/
package myservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type Arg struct {
	Args []string `protobuf:"bytes,1,rep,name=args" json:"args,omitempty"`
}

func (m *Arg) Reset()                    { *m = Arg{} }
func (m *Arg) String() string            { return proto.CompactTextString(m) }
func (*Arg) ProtoMessage()               {}
func (*Arg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Arg) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

// The response message containing the greetings
type Output struct {
	Retcode int32  `protobuf:"varint,1,opt,name=retcode" json:"retcode,omitempty"`
	Stdout  []byte `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr  []byte `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (m *Output) Reset()                    { *m = Output{} }
func (m *Output) String() string            { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()               {}
func (*Output) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Output) GetRetcode() int32 {
	if m != nil {
		return m.Retcode
	}
	return 0
}

func (m *Output) GetStdout() []byte {
	if m != nil {
		return m.Stdout
	}
	return nil
}

func (m *Output) GetStderr() []byte {
	if m != nil {
		return m.Stderr
	}
	return nil
}

func init() {
	proto.RegisterType((*Arg)(nil), "myservice.Arg")
	proto.RegisterType((*Output)(nil), "myservice.Output")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MyService service

type MyServiceClient interface {
	// Sends a greeting
	Hello(ctx context.Context, in *Arg, opts ...grpc.CallOption) (*Output, error)
	Goodbye(ctx context.Context, in *Arg, opts ...grpc.CallOption) (*Output, error)
}

type myServiceClient struct {
	cc *grpc.ClientConn
}

func NewMyServiceClient(cc *grpc.ClientConn) MyServiceClient {
	return &myServiceClient{cc}
}

func (c *myServiceClient) Hello(ctx context.Context, in *Arg, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := grpc.Invoke(ctx, "/myservice.MyService/Hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) Goodbye(ctx context.Context, in *Arg, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := grpc.Invoke(ctx, "/myservice.MyService/Goodbye", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyService service

type MyServiceServer interface {
	// Sends a greeting
	Hello(context.Context, *Arg) (*Output, error)
	Goodbye(context.Context, *Arg) (*Output, error)
}

func RegisterMyServiceServer(s *grpc.Server, srv MyServiceServer) {
	s.RegisterService(&_MyService_serviceDesc, srv)
}

func _MyService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Arg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myservice.MyService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).Hello(ctx, req.(*Arg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_Goodbye_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Arg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).Goodbye(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myservice.MyService/Goodbye",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).Goodbye(ctx, req.(*Arg))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "myservice.MyService",
	HandlerType: (*MyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _MyService_Hello_Handler,
		},
		{
			MethodName: "Goodbye",
			Handler:    _MyService_Goodbye_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "myservice/myservice.proto",
}

func init() { proto.RegisterFile("myservice/myservice.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcc, 0xad, 0x2c, 0x4e,
	0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x87, 0xb3, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38,
	0xe1, 0x02, 0x4a, 0x92, 0x5c, 0xcc, 0x8e, 0x45, 0xe9, 0x42, 0x42, 0x5c, 0x2c, 0x89, 0x45, 0xe9,
	0xc5, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x52, 0x10, 0x17, 0x9b, 0x7f, 0x69,
	0x49, 0x41, 0x69, 0x89, 0x90, 0x04, 0x17, 0x7b, 0x51, 0x6a, 0x49, 0x72, 0x7e, 0x4a, 0xaa, 0x04,
	0xa3, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x8c, 0x2b, 0x24, 0xc6, 0xc5, 0x56, 0x5c, 0x92, 0x92, 0x5f,
	0x5a, 0x22, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x13, 0x04, 0xe5, 0x41, 0xc5, 0x53, 0x8b, 0x8a, 0x24,
	0x98, 0xe1, 0xe2, 0xa9, 0x45, 0x45, 0x46, 0x99, 0x5c, 0x9c, 0xbe, 0x95, 0xc1, 0x10, 0xbb, 0x85,
	0x74, 0xb8, 0x58, 0x3d, 0x52, 0x73, 0x72, 0xf2, 0x85, 0xf8, 0xf4, 0x10, 0x2e, 0x74, 0x2c, 0x4a,
	0x97, 0x12, 0x44, 0xe2, 0x43, 0x9c, 0xa0, 0xc4, 0x20, 0xa4, 0xc7, 0xc5, 0xee, 0x9e, 0x9f, 0x9f,
	0x92, 0x54, 0x99, 0x4a, 0x94, 0xfa, 0x24, 0x36, 0xb0, 0x5f, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x48, 0xaa, 0x4a, 0x94, 0x08, 0x01, 0x00, 0x00,
}
